################################################################################
################################################################################
### Asteroids - Arcade Game
### Python code adapted to run on www.codeskulptor.org
### Copy paste the code into http://www.codeskulptor.org and enjoy
################################################################################
################################################################################

import simplegui
import math
import random

### Globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0.5
started = False

##############
### Image Class:
##############

class ImageInfo:

    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated
    
### Images and Sound:

# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([50, 50], [100, 100], 0, [9, 9], True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/explosion.hasgraphics.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

### Helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

############
### Ship class:
############

class Ship:

    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.image_offset = 0
        
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def get_angle(self):
        return self.angle
     
    def thrust_update(self, thrust):
        self.thrust = thrust
        if self.thrust:
            self.image_offset = self.image_size[0]
            ship_thrust_sound.play()
        else:
            self.image_offset = 0
            ship_thrust_sound.rewind()
            
    def draw(self,canvas):
        canvas.draw_image(self.image, [self.image_center[0] + self.image_offset, self.image_center[1]], self.image_size, self.pos, self.image_size, self.angle)
        
    def move_left(self):
        self.angle_vel -= 0.1
    
    def move_right(self):
        self.angle_vel += 0.1
        
    def update(self):
        self.angle += self.angle_vel
        forward = angle_to_vector(self.angle)
        for i in range(2):
            self.pos[i] += self.vel[i]
            if i == 0:
                self.pos[i] %= WIDTH
            else:
                self.pos[i] %= HEIGHT
                
            self.vel[i] *= 0.99
            
            if self.thrust:
                self.vel[i] += (0.1 * forward[i])

    def shoot(self):
        global missile_group
        forward = angle_to_vector(self.angle)
        m_pos = [self.pos[0] + (self.radius * forward[0]), self.pos[1] + (self.radius * forward[1])]
        m_vel = [self.vel[0] + (6 * forward[0]), self.vel[1] + (6 * forward[1])]
        a_missile = Sprite(m_pos, m_vel, 0, 0, missile_image, missile_info, missile_sound)
        missile_group.add(a_missile)
    
#############
### Sprite class:
#############

class Sprite:

    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0], pos[1]]
        self.vel = [vel[0], vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
            
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def get_angle(self):
        return self.angle
    
    def draw(self, canvas):
        if self.animated == True:
            explosion_index = [self.age % self.lifespan[0], (self.age // self.lifespan[0]) % self.lifespan[1]]
            canvas.draw_image(self.image, [self.image_center[0] + explosion_index[0] * self.image_size[0], self.image_center[1] + explosion_index[1] * self.image_size[1]], 
                     self.image_size, self.pos, self.image_size)
            self.age += 1
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
        
    def update(self):
        self.angle += self.angle_vel
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        self.age += 1
        if self.age >= self.lifespan:
            return True
        else:
            return False
                
    def collide(self, other_object):
        other_pos = other_object.get_position()
        other_rad = other_object.get_radius()
        distance = dist(self.pos, other_pos)
        if distance < (other_rad + self.radius):
            return True
        else:
            return False
        
    def life_ended(self, exp_set):
        if (self.lifespan[0] * self.lifespan[1]) == self.age:
            exp_set.discard(self)


### Checking for collisions:
def group_collide(sprite_group, other_object):
    global explosion_group
    collision_number = 0
    forward = angle_to_vector(other_object.get_angle())
    object_pos = other_object.get_position()
    radius = other_object.get_radius()
    pos = [object_pos[0] + (radius * forward[0]), object_pos[1] + (radius * forward[1])]
    remove_set = set([])
    for sprite in sprite_group:
        collision = sprite.collide(other_object)
        if collision == True:
            remove_set.add(sprite)
            collision_number += 1
            new_explosion = Sprite(pos, [0,0], 0, 0, explosion_image, explosion_info, explosion_sound)
            explosion_group.add(new_explosion)
    sprite_group.difference_update(remove_set)
    return collision_number

def group_group_collide(group_1, group_2):
    remove_set = set([])
    collision_number = 0
    for elements in group_2:
        if group_collide(group_1, elements) > 0:
            collision_number += 1
            remove_set.add(elements)
    group_2.difference_update(remove_set)  
    return collision_number

### Keyboard handlers:        
def keydown(key):
    if key == simplegui.KEY_MAP["left"]:
        my_ship.move_left()
    elif key == simplegui.KEY_MAP["right"]:
        my_ship.move_right()
    elif key == simplegui.KEY_MAP["up"]:
        my_ship.thrust_update(True)
    elif key == simplegui.KEY_MAP["space"]:
        my_ship.shoot()

def keyup(key):
    if key == simplegui.KEY_MAP["left"]:
        my_ship.angle_vel = 0        
    elif key == simplegui.KEY_MAP["right"]:
        my_ship.angle_vel = 0
    elif key == simplegui.KEY_MAP["up"]:
        my_ship.thrust_update(False)

### Mouse Click handlers:
def click(pos):
    global started, lives, score
    lives = 3
    score = 0
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
        soundtrack.play()
        
def draw(canvas):
    global time, score, lives, rock_group, started
    
### Animation:
    time += 1
    center = debris_info.get_center()
    size = debris_info.get_size()
    wtime = (time / 8) % center[0]
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, [center[0] - wtime, center[1]], [size[0] - 2 * wtime, size[1]], 
                                [WIDTH / 2 + 1.25 * wtime, HEIGHT / 2], [WIDTH - 2.5 * wtime, HEIGHT])
    canvas.draw_image(debris_image, [size[0] - wtime, center[1]], [2 * wtime, size[1]], 
                                [1.25 * wtime, HEIGHT / 2], [2.5 * wtime, HEIGHT])
    
    canvas.draw_text("Lives:", (50, 50), 32, "White")
    canvas.draw_text(str(lives), (50, 85), 32, "White")
    canvas.draw_text("Score:", (650, 50), 32, "White")
    canvas.draw_text(str(score), (650, 85), 32, "White")
    
### Update ship and sprites:
    process_sprite_group(rock_group, canvas)
    process_sprite_group(missile_group, canvas)
    process_sprite_group(explosion_group, canvas)
    my_ship.draw(canvas)
    my_ship.update()
    
### Splash screen:
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
    
    collision_ship = group_collide(rock_group, my_ship)
    lives -= collision_ship
    collision_number = group_group_collide(rock_group, missile_group)
    score += (collision_number * 10)
    
    if lives == 0:
        started = False 
        rock_group = set([])
        soundtrack.rewind()
    
    for explosion in explosion_group:   
        explosion.life_ended(explosion_group)

    
### Timer handler that spawns a rock:
def rock_spawner():
    global rock_group, my_ship
    rock_pos = [random.randrange(0, WIDTH), random.randrange(0, HEIGHT)]
    rock_avel = random.random() * .2 - .1
    diff = .6 + score / 500
    hdiff = diff / 2
    rock_vel = [random.random() * diff - hdiff, random.random() * diff - hdiff]
    a_rock = Sprite(rock_pos, rock_vel, 0, rock_avel, asteroid_image, asteroid_info)
    if len(rock_group) < 12 and started == True:
        rock_rad = a_rock.get_radius()
        ship_pos = my_ship.get_position()
        ship_rad = my_ship.get_radius()
        distance = dist(ship_pos,rock_pos)
        if distance > rock_rad + ship_rad + 100:
            rock_group.add(a_rock)
        
### Helper function:
def process_sprite_group(sprite_group, canvas):
    remove_set = set([])
    for sprite in sprite_group:
        sprite.draw(canvas)
        sprite.update()
        if sprite.update() == True:
            remove_set.add(sprite)
    sprite_group.difference_update(remove_set)   

### Initialize stuff:
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

### Initialize ship: 
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)

### Initialize rocks, missiles, and explosions:
rock_group = set([])
missile_group = set([])
explosion_group = set([])

### Register handlers:
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)
frame.set_draw_handler(draw)

timer = simplegui.create_timer(1000.0, rock_spawner)

### Get things rolling:
timer.start()
frame.start()