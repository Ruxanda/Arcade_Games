################################################################################
################################################################################
### Pong - Arcade Game
### Python code adapted to run on www.codeskulptor.org
### Copy paste the code into http://www.codeskulptor.org and enjoy
################################################################################
################################################################################

import simplegui
import random
import math

### Initialize globals:
### pos and vel encode vertical info for paddles

WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 12
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [3, -3]
score1 = 0
score2 = 0
paddle1_pos = [ HALF_PAD_WIDTH, HEIGHT/2 ]
paddle2_pos = [ (WIDTH-1) - HALF_PAD_WIDTH, HEIGHT/2 ]
paddle1_vel = [ 0, 0 ]
paddle2_vel = [ 0, 0 ]
right = True

### Helper function that spawns a ball by updating the ball's position vector and velocity vector
### if right is True, the ball's velocity is upper right, else upper left

def ball_init(right):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    if right == True:
        ball_vel = [random.randrange(120, 240)/60, -random.randrange(60, 180)/60]
    else:
        ball_vel = [-random.randrange(120, 240)/60, -random.randrange(60, 180)/60]

        
### Define event handlers:

def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are floats
    global score1, score2  # these are ints
    
    if score1 >= score2:
        ball_init(True)
    else:
        ball_init(False)
        
    score1 = 0
    score2 = 0

def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    
    ### Update paddle's vertical position, keep paddle on the screen
    
    if (paddle1_pos[1] + paddle1_vel[1]) <= (HEIGHT - HALF_PAD_HEIGHT): # bottom left
        paddle1_pos[1] += paddle1_vel[1]
    else:    
        paddle1_pos[1] = (HEIGHT-1) - HALF_PAD_HEIGHT
    
    if (paddle1_pos[1] + paddle1_vel[1]) >= HALF_PAD_HEIGHT: # top left
        paddle1_pos[1] += paddle1_vel[1]
    else:
        paddle1_pos[1] = HALF_PAD_HEIGHT
        
    if (paddle2_pos[1] + paddle2_vel[1]) <= (HEIGHT - HALF_PAD_HEIGHT): # bottom right
        paddle2_pos[1] += paddle2_vel[1]
    else:
        paddle2_pos[1] = (HEIGHT-1) - HALF_PAD_HEIGHT
        
    if (paddle2_pos[1] + paddle2_vel[1]) >= HALF_PAD_HEIGHT: # top right
        paddle2_pos[1] += paddle2_vel[1]
    else:
        paddle2_pos[1] = HALF_PAD_HEIGHT
        
    ### Draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
    ### Draw paddles
    c.draw_line( [paddle1_pos[0], paddle1_pos[1] - HALF_PAD_HEIGHT], [paddle1_pos[0], paddle1_pos[1] + HALF_PAD_HEIGHT], PAD_WIDTH, "White")
    c.draw_line( [paddle2_pos[0], paddle2_pos[1] - HALF_PAD_HEIGHT], [paddle2_pos[0], paddle2_pos[1] + HALF_PAD_HEIGHT], PAD_WIDTH, "White")
    
    ### Update ball
    ball_pos[0] += ball_vel[0]  # DISTANCE = SPEED / TIME
    ball_pos[1] += ball_vel[1] 
    
    if ball_pos[0] - BALL_RADIUS <= PAD_WIDTH: # left
        if ball_pos[1] < paddle1_pos[1] - HALF_PAD_HEIGHT:
            ball_init(True)
            score2 += 1
        elif ball_pos[1] > paddle1_pos[1] + HALF_PAD_HEIGHT:
            ball_init(True)
            score2 += 1
        else:
            ball_vel[0] = - ball_vel[0] * 1.1
            
    elif ball_pos[0] + BALL_RADIUS >= (WIDTH - 1) - PAD_WIDTH: # right
        if ball_pos[1] < paddle2_pos[1] - HALF_PAD_HEIGHT:
            ball_init(False)
            score1 += 1
        elif ball_pos[1] > paddle2_pos[1] + HALF_PAD_HEIGHT:
            ball_init(False)
            score1 += 1
        else:
            ball_vel[0] = - ball_vel[0] * 1.1
            
    elif ball_pos[1] <= BALL_RADIUS: # top
        ball_vel[1] = - ball_vel[1]
        
    elif ball_pos[1] >= (HEIGHT -1) - BALL_RADIUS: # bottom
        ball_vel[1] = - ball_vel[1]
    
    ### Draw ball and scores
    c.draw_circle( ball_pos, BALL_RADIUS, 1, "White", "White")
    c.draw_text( str(score1), [180, 120], 50, "White")
    c.draw_text( str(score2), [420, 120], 50, "White")
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    vel = 4
    
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel[1] -= vel
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel[1] += vel
        
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel[1] -= vel
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel[1] += vel
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    vel = 0
    
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel[1] = vel
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel[1] = vel
        
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel[1] = vel
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel[1] = vel
    

### Create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", new_game, 80)

### Start frame
frame.start()